name: Packer

on:
  push:
    branches:
      - main

env:
  IMAGE_PUBLISHER: MicrosoftWindowsDesktop

  # With Office 365
  IMAGE_OFFER: office-365
  IMAGE_SKU: win11-21h2-avd-m365

  # Without Office 365
  #IMAGE_OFFER: windows-11
  #IMAGE_SKU: win11-21h2-avd

jobs:
  latest_windows_version:
    name: Get latest available Windows version from Azure
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.az_vm_image_version.outputs.version }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Query Latest Version
        id: az_vm_image_version
        uses: azure/CLI@v1
        with:
          azcliversion: 2.34.0
          inlineScript: |
            latest_version=$(
              az vm image list \
                --publisher "${IMAGE_PUBLISHER}" \
                --offer "${IMAGE_OFFER}" \
                --sku "${IMAGE_SKU}" \
                --all \
                --query "[*].version | sort(@)[-1:]" \
                --out tsv
            )

            echo "Publisher: ${IMAGE_PUBLISHER}"
            echo "Offer:     ${IMAGE_OFFER}"
            echo "SKU:       ${IMAGE_SKU}"
            echo "Version:   ${latest_version}"

            echo "::set-output name=version::${latest_version}"

  check_if_image_exists:
    name: Check if latest version has already been built
    runs-on: ubuntu-latest
    needs: latest_windows_version
    outputs:
      image_exists: ${{ steps.az_image_exists.outputs.image_exists }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Check If Image Exists
        id: az_image_exists
        uses: azure/CLI@v1
        with:
          azcliversion: 2.34.0
          inlineScript: |
            if az image show \
              --resource-group "${{ secrets.PACKER_ARTIFACTS_RESOURCE_GROUP }}" \
              --name "${IMAGE_SKU}-${{ needs.latest_windows_version.outputs.version }}"; then
              image_exists=true
            else
              image_exists=false
            fi

            echo "Image Exists: ${image_exists}"
            echo "::set-output name=image_exists::${image_exists}"

  packer_build:
    name: Packer Build
    runs-on: ubuntu-latest
    needs: check_if_image_exists
    if: needs.check_if_image_exists.outputs.image_exists == 'false'
    steps:
      - name: Image Exists
        run: echo "${{ needs.check_if_image_exists.outputs.image_exists }}"
